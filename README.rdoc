== README

Demo app: <tt>http://104.236.184.188</tt>

---

Design:
* I decided to use a common Rails stack due to ease of deployment, and for the familiarity of everyone that will be reviewing the code.
* I broke the data into 2 models, Jobs, and Links. Jobs->Links is a one-to-many relationship because there is no way of knowing how many links will belong to the job until after it runs. Links stores the found images in a postgres array. I did not abstract the images into a model because I didnt see a need to normalize the image data.
* This design would lend itself to searching recursively into the links for multiple levels (not just 2).

Shortcomings:
The devops side of things is fairly brittle. I would like to add the foreman gem to ensure sidekiq reamins running even after erroring out.


Possible Improvements:
* Rescue more possible errors
*I am running a very conservative number of sidekiq workers at the moment. Part of taht decision was because I deployed to a pretty small instance on digital ocean and i didnt want to run out of memory. I also thought it would be easier to view the /status page as it progresses if sidekiq didnt blow through all the links in 2 seconds.

My initial thought was to build this API using Node/Express. The lack of html views and the non-blocking nature would make it a good fit.

