A README in the root of your project that provides us with:
○ The URL of your running application
○ a small write-up about design decisions, shortcomings, possible improvements


== README

Demo app: <tt>http://sample.url</tt>

---

Design:
* I decided to use a common Rails stack due to ease of deployment, and for the familiarity of everyone that will be reviewing the code.
* I broke the data into 2 models, Jobs, and Links. Jobs->Links is a one-to-many relationship because there is no way of knowing how many links will belong to the job until after it runs. Links stores the found images in a postgres array. I did not abstract the images into a model because I didnt see a need to normalize the image data.
* This design would lend itself to searching recursively into the links for multiple levels (not just 2).

Shortcomings:
* Due to the blocking nature of the code, a long list of URLs, or a URL with a lot of links in it can make for a slow response.

Possible Improvements:
* Move logic into sidekiq workers
* Rescue more possible errors

My initial thought was to build this API using Node/Express. The lack of html views and the non-blocking nature would make it a good fit.

